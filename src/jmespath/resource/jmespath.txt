expr              = terminating / root-expr / wildcard-values
root-expr         = non-test / not / binary-expr
non-test          = subexpr / index / flatten /
                     wildcard-index / filter /
                     identifier / current-node / literal /
                     root-multi-list / multi-hash /
                     function / group / slice
terminating       = pipe / or / and
terminating-rhs   = root-expr / wildcard-values / or / and
pipe              = expr "|" terminating-rhs
or                = (root-expr / wildcard-values) "||" terminating-rhs
and               = (root-expr / wildcard-values) "&&" terminating-rhs
wildcard-values   = "*"
group             = "(" expr ")"
subexpr           = (non-test / wildcard-values) (object-predicate / array-predicate)
object-predicate  = "." (identifier /
                         multi-list /
                         multi-hash /
                         function /
                         wildcard-values)
array-predicate   = index / slice / wildcard-index / flatten / filter
index             = "[" number "]"
slice             = "[" *number ":" *number *(":" *number) "]"
wildcard-index    = "[*]"
flatten           = "[]"
filter            = "[?" (not / non-test / terminating / binary-expr) "]"
not               = "!" (non-test / not)
binary-expr       = expr comparator (non-test / wildcard-values)
comparator        = "<" / "<=" / "==" / ">=" / ">" / "!="
root-multi-list   = "[" (root-expr / multiple-values / terminating) "]"
multi-list        = "[" (expr / multiple-values) "]"
multiple-values   = expr 1*( "," expr )
multi-hash        = "{" ( keyval *( "," keyval ) ) "}"
keyval            = identifier ":" expr
function          = unquoted-string function-args
function-args     = "(" *1(function-arg *("," function-arg)) ")"
function-arg      = expr / expref
current-node      = "@"
expref            = "&" expr
literal           = "`" 1*(unescaped-literal / escaped-literal) "`"
unescaped-literal = %x20-59 / %x61-10FFFF
                     ; Any character after and including space, but not `
escaped-literal   = escaped-char / (escape "`")
number            = *"-" 1*DIGIT
identifier        = unquoted-string / quoted-string
unquoted-string   = (ALPHA / "_") *(DIGIT / ALPHA / "_")
quoted-string     = DQUOTE 1*(unescaped-char / escaped-char) DQUOTE
unescaped-char    = %x20-21 / %x23-5B / %x5D-10FFFF
                     ; Any character other than "\"
escape            = %x5C             ; "\"
escaped-char      = escape (
                     %x22 /          ; "    quotation mark  U+0022
                     %x5C /          ; \    reverse solidus U+005C
                     %x2F /          ; /    solidus         U+002F
                     %x62 /          ; b    backspace       U+0008
                     %x66 /          ; f    form feed       U+000C
                     %x6E /          ; n    line feed       U+000A
                     %x72 /          ; r    carriage return U+000D
                     %x74 /          ; t    tab             U+0009
                     %x75 4HEXDIG )  ; uXXXX                U+XXXX
