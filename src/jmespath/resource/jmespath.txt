expr              = terminal / non-terminal
root-expr         = non-test / not / comparison
non-test          = subexpr / index / flatten / wildcard-index / filter /
                     identifier / current-node / literal / root-multi-list /
                     multi-hash / function / group / slice
group             = "(" expr ")"

; Terminal expressions stop projections. "&&" binds more tightly than "||".
; "||" binds more tightly than "|".
terminal          = pipe / or / and
non-terminal      = root-expr / wildcard-values
pipe              = expr "|" (non-terminal / or / and)
or                = (non-terminal / and) "||" (non-terminal / or / and)
and               = non-terminal "&&" (non-terminal / and)

; subexpr handles most rules, including a.b, a[0], a[::-1], a.*, etc.
subexpr           = object-subexpr / array-subexpr
object-subexpr    = (subexpr / index / flatten / wildcard-index /
                     filter / identifier / current-node / literal /
                     multi-hash / function / group / slice / wildcard-values)
                     "." (identifier / multi-list / multi-hash / function /
                          wildcard-values)
array-subexpr     = (subexpr / index / flatten / wildcard-index / filter /
                     identifier / current-node / literal / root-multi-list /
                     function / group / slice / wildcard-values)
                     (index / slice / wildcard-index / flatten / filter)

index             = "[" number "]"
slice             = "[" *number ":" *number *(":" *number) "]"
wildcard-index    = "[*]"
flatten           = "[]"

filter            = "[?" (not / non-test / terminal / comparison) "]"
not               = "!" (non-test / not)
comparison        = expr comparator (non-test / not / wildcard-values)
comparator        = "<" / "<=" / "==" / ">=" / ">" / "!="

root-multi-list   = "[" (root-expr / multiple-values / terminal) "]"
multi-list        = "[" (expr / multiple-values) "]"
multiple-values   = expr 1*( "," expr )
multi-hash        = "{" ( keyval *( "," keyval ) ) "}"
keyval            = identifier ":" expr

function          = unquoted-string function-args
function-args     = "(" *1(function-arg *("," function-arg)) ")"
function-arg      = expr / expref

expref            = "&" expr
wildcard-values   = "*"
current-node      = "@"

number            = *"-" 1*DIGIT
literal           = "`" 1*(unescaped-literal / escaped-literal) "`"
unescaped-literal = %x20-59 / %x61-10FFFF
                     ; Any character after and including space, but not `
escaped-literal   = escaped-char / (escape "`")
identifier        = unquoted-string / quoted-string
unquoted-string   = (ALPHA / "_") *(DIGIT / ALPHA / "_")
quoted-string     = DQUOTE 1*(unescaped-char / escaped-char) DQUOTE
unescaped-char    = %x20-21 / %x23-5B / %x5D-10FFFF
                     ; Any character other than "\"
escape            = %x5C             ; "\"
escaped-char      = escape (
                     %x22 /          ; "    quotation mark  U+0022
                     %x5C /          ; \    reverse solidus U+005C
                     %x2F /          ; /    solidus         U+002F
                     %x62 /          ; b    backspace       U+0008
                     %x66 /          ; f    form feed       U+000C
                     %x6E /          ; n    line feed       U+000A
                     %x72 /          ; r    carriage return U+000D
                     %x74 /          ; t    tab             U+0009
                     %x75 4HEXDIG )  ; uXXXX                U+XXXX
